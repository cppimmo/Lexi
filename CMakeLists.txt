cmake_minimum_required(VERSION 3.21)
project(Lexi)

set(CMAKE_CONFIGURATION_TYPES Debug Release)
# Set the configuration types intended for use with any and all sub-projects:
set(CMAKE_CONFIGURATION_TYPES Debug Release) # Profile
set(CMAKE_DEBUG_POSTFIX "") # Empty CMAKE_DEBUG_POSTFIX
# Set the C++ standard.
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Add preprocessor defines for the available configurations:
add_compile_definitions($<$<CONFIG:Debug>:LEXI_CONFIG_DEBUG>
						$<$<CONFIG:Profile>:LEXI_CONFIG_PROFILE>
						$<$<CONFIG:Release>:LEXI_CONFIG_RELEASE>)

# Macro creates a list of source file matching expression named LIST with
# SOURCE_DIR prepended to each pattern.
macro(get_sources_match_list LIST SOURCE_DIR)
	file(GLOB_RECURSE ${LIST} LIST_DIRECTORIES true CONFIGURE_DEPENDS
		"${SOURCE_DIR}/*.cpp"
		"${SOURCE_DIR}/*.hpp"
		"${SOURCE_DIR}/*.ipp"
		"${SOURCE_DIR}/*.h")
endmacro()

# Set the output directory for our shared library binaries:
# TARGET_NAME is the name of the target.
# OUTPUT_DIR is the directory stored in an environment variable (most-likely).
macro(set_target_output_directory TARGET_NAME OUTPUT_DIR)
	# The $<0:> removes the Debug & Release folders generated by Visual Studio.
	set_target_properties(${TARGET_NAME} PROPERTIES
		RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR}$<0:>
		LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIR}$<0:>
		ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR}$<0:>)
	# Loop through project-wide configuration type:
	foreach(OUTPUT_CONFIGURATION ${CMAKE_CONFIGURATION_TYPES})
		string(TOUPPER ${OUTPUT_CONFIGURATION} OUTPUT_CONFIGURATION)
		set_target_properties(${TARGET_NAME} PROPERTIES
			CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUT_CONFIGURATION} ${OUTPUT_DIR}$<0:>
			CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUT_CONFIGURATION} ${OUTPUT_DIR}$<0:>
			CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUT_CONFIGURATION} ${OUTPUT_DIR}$<0:>)
	endforeach()
endmacro()

# Creates directory tree of soure files in soultion explorer menu.
function(create_source_group SRC_FILES)
    #message(STATUS "CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}")
	#message(STATUS "SRC_FILES=${SRC_FILES}")
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} PREFIX "Source Files" FILES ${SRC_FILES})
endfunction()

find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK4 REQUIRED gtk4)

include_directories(${GTK4_INCLUDE_DIRS})
link_directories(${GTK4_LIBRARY_DIRS})
add_definitions(${GTK4_CFLAGS_OTHER})

set(SRC_DIR "Source")
add_executable(Lexi)

target_include_directories(Lexi PRIVATE "${SRC_DIR}")

get_sources_match_list(SRC_FILES "${SRC_DIR}")
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} PREFIX "Source Files" FILES ${SRC_FILES})
target_sources(Lexi PRIVATE ${SRC_FILES})
target_link_libraries(Lexi ${GTK4_LIBRARIES})
